name: CI

on:
  push:
    branches: [ main, develop, 'feature/**', 'lab/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  CONAN_V2_MODE: 1
  CMAKE_VERSION: 3.27

jobs:
  build-linux:
    name: Linux ${{ matrix.compiler }} ${{ matrix.build_type }}
    runs-on: ubuntu-latest
    container:
      image: archlinux:latest
    
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc, clang]
        build_type: [Debug, Release, RelWithDebInfo]
        
    steps:
    - name: Install dependencies
      run: |
        pacman -Syu --noconfirm
        pacman -S --noconfirm base-devel cmake git python python-pip \
          gcc clang ninja ccache eigen fmt spdlog benchmark gtest
    
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    
    - name: Setup Conan
      run: |
        pip install --break-system-packages conan
        conan profile detect --force
    
    - name: Cache Conan packages
      uses: actions/cache@v3
      with:
        path: ~/.conan2
        key: ${{ runner.os }}-conan-${{ hashFiles('conanfile.py') }}
        restore-keys: |
          ${{ runner.os }}-conan-
    
    - name: Install Conan dependencies
      run: |
        conan install . \
          --output-folder=build \
          --build=missing \
          --settings=build_type=${{ matrix.build_type }}
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler == 'gcc' && 'g++' || 'clang++' }} \
          -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake \
          -DENABLE_TESTING=ON \
          -DENABLE_COVERAGE=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }} \
          -DENABLE_SANITIZERS=${{ matrix.build_type == 'Debug' && 'ON' || 'OFF' }}
    
    - name: Build
      run: cmake --build build --parallel $(nproc)
    
    - name: Test
      run: |
        cd build
        ctest --output-on-failure --parallel $(nproc)
    
    - name: Benchmark
      if: matrix.build_type == 'Release'
      run: |
        ./build/benchmarks/ml_labs_benchmarks --benchmark_format=json \
          --benchmark_out=benchmark_results.json
    
    - name: Upload benchmark results
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-${{ matrix.compiler }}
        path: benchmark_results.json

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format-15 clang-tidy-15 cppcheck
    
    - name: Check formatting
      run: |
        find . \( -name "*.cpp" -o -name "*.hpp" -o -name "*.h" \) \
          -not -path "./build/*" \
          -not -path "./external/*" \
          -exec clang-format-15 --dry-run --Werror {} +
    
    - name: Static analysis
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem \
          --inline-suppr --quiet --error-exitcode=1 \
          -I include/ src/ labs/